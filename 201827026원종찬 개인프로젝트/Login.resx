<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>